Index: jni/swig-glue/pjsua.i_header
===================================================================
--- jni/swig-glue/pjsua.i_header	(revisión: 1212)
+++ jni/swig-glue/pjsua.i_header	(copia de trabajo)
@@ -166,6 +166,20 @@
 	virtual int timer_schedule(int entry, int entryId, int time) {}
 	virtual int timer_cancel(int entry, int entryId) {}
 //#endif
+
+
+// jegumi transport state
+virtual void on_transport_state(pjsip_transport *tp, 
+			       pjsip_transport_state state,
+			       const pjsip_transport_state_info *info) {}
+
+// 0319012012 patch for the presence - ggb
+       virtual void on_send_request_status (
+                pjsip_status_code status,
+		const pj_str_t *reason,
+                const pj_str_t *mime_type,
+                const pj_str_t *body) {}
+// 0319012012 end patch
 	
 };
 
@@ -377,8 +391,22 @@
 }
 //#endif
 
+// jegumi transport state
+void on_transport_state_wrapper(pjsip_transport *tp, 
+		        pjsip_transport_state state,
+			const pjsip_transport_state_info *info) {
+ registeredCallbackObject->on_transport_state(tp, 
+			       state,
+			       info);	
 }
 
+// 0319012012 patch for presence
+void on_send_request_status_wrapper(pjsip_status_code status, const pj_str_t *reason, const pj_str_t *mime_type, const pj_str_t *body) {
+    registeredCallbackObject->on_send_request_status(status, reason, mime_type, body);
+}
+// 0319012012 end patch
+}
+
 static struct pjsua_callback wrapper_callback_struct = {
 	&on_call_state_wrapper,
 	&on_incoming_call_wrapper,
@@ -410,8 +438,8 @@
 	&on_nat_detect_wrapper,
 	&on_call_redirected_wrapper,
 	&on_mwi_info_wrapper,
+	&on_transport_state_wrapper, //on_transport_state jegumi
 	NULL, //on_call_media_transport_state
-	NULL, //on_transport_state
 	NULL, //on_ice_transport_error
 	NULL, //on_snd_dev_operation
 	NULL, //on_call_media_event
@@ -512,8 +540,21 @@
 	virtual int timer_cancel(int entry, int entryId);
 //#endif
 
+// 0319012012 patch for the presence - ggb
+        virtual void on_send_request_status (
+		pjsip_status_code status,
+		const pj_str_t *reason,
+        const pj_str_t *mime_type,
+        const pj_str_t *body);
+
+// jegumi transport state
+virtual void on_transport_state(pjsip_transport *tp, 
+			       pjsip_transport_state state,
+			       const pjsip_transport_state_info *info);
 };
 
+// end patch
+
 %constant struct pjsua_callback* WRAPPER_CALLBACK_STRUCT = &wrapper_callback_struct;
 
 void setCallbackObject(Callback* callback);
@@ -1284,4 +1325,101 @@
      */
     unsigned			 sess_expires;	
 
-};
\ No newline at end of file
+};
+
+/** 
+ * 16012012 patch to add and get sip headers - jegumi
+ */
+
+// from pjsip/include/pjsip/pjsua_lib/pjsua.h:1625
+struct pjsua_msg_data
+{
+    pjsip_hdr	hdr_list;
+    pj_str_t	content_type;
+    pj_str_t	msg_body;
+    pjsip_media_type  multipart_ctype;
+    pjsip_multipart_part multipart_parts;
+};
+
+struct pjsip_pkt_info
+{
+    pj_time_val		 timestamp;
+    char	         packet[PJSIP_MAX_PKT_LEN];
+    pj_uint32_t		 zero;
+    pj_ssize_t		 len;
+    pj_sockaddr		 src_addr;
+    int			 src_addr_len;
+    char	        src_name[PJ_INET6_ADDRSTRLEN];
+    int			 src_port;
+};
+
+// from pjsip/include/pjsip/sip_transport.h:1249
+typedef enum pjsip_transport_state
+{
+    PJSIP_TP_STATE_CONNECTED,	    /**< Transport connected, applicable only
+					 to connection-oriented transports
+					 such as TCP and TLS.		    */
+    PJSIP_TP_STATE_DISCONNECTED	    /**< Transport disconnected, applicable
+					 only to connection-oriented 
+					 transports such as TCP and TLS.    */
+} pjsip_transport_state;
+
+// from pjsip/include/pjsip/sip_transport.h:281
+struct pjsip_rx_data
+{
+    struct 
+    {
+	pj_pool_t		*pool;
+	pjsip_transport		*transport;
+	void			*tp_data;
+	pjsip_rx_data_op_key	 op_key;
+    } tp_info;
+
+    pjsip_pkt_info pkt_info;
+
+   /* struct
+    {
+	pj_time_val		 timestamp;
+	char			 packet[PJSIP_MAX_PKT_LEN];
+	pj_uint32_t		 zero;
+	pj_ssize_t		 len;
+	pj_sockaddr		 src_addr;
+	int			 src_addr_len;
+	char			 src_name[PJ_INET6_ADDRSTRLEN];
+	int			 src_port;
+
+    } pkt_info; */
+
+    struct
+    {
+	char			*msg_buf;
+	int			 len;
+	pjsip_msg		*msg;
+	char			*info;
+	pjsip_cid_hdr		*cid;
+	pjsip_from_hdr		*from;
+	pjsip_to_hdr		*to;
+	pjsip_via_hdr		*via;
+	pjsip_cseq_hdr		*cseq;
+	pjsip_max_fwd_hdr	*max_fwd;
+	pjsip_route_hdr		*route;
+	pjsip_rr_hdr		*record_route;
+	pjsip_ctype_hdr		*ctype;
+	pjsip_clen_hdr		*clen;
+	pjsip_require_hdr	*require;
+	pjsip_supported_hdr	*supported;
+	pjsip_parser_err_report parse_err;
+
+    } msg_info;
+
+    struct
+    {
+	void	*mod_data[PJSIP_MAX_MODULE];
+
+    } endpt_info;
+
+};
+
+/** 
+ * 16012012 end patch
+ */
Index: jni/pjsip/sources/pjsip/src/pjsua-lib/pjsua_core.c
===================================================================
--- jni/pjsip/sources/pjsip/src/pjsua-lib/pjsua_core.c	(revisión: 3933)
+++ jni/pjsip/sources/pjsip/src/pjsua-lib/pjsua_core.c	(copia de trabajo)
@@ -1873,6 +1873,8 @@
 
     PJSUA_LOCK();
 
+    PJ_LOG(2, (THIS_FILE,"pjsua_transport_create. Init"));
+
     /* Find empty transport slot */
     for (id=0; id < PJ_ARRAY_SIZE(pjsua_var.tpdata); ++id) {
 	if (pjsua_var.tpdata[id].data.ptr == NULL)
@@ -2005,6 +2007,7 @@
 
 #if defined(PJSIP_HAS_TLS_TRANSPORT) && PJSIP_HAS_TLS_TRANSPORT!=0
     } else if (type == PJSIP_TRANSPORT_TLS) {
+        PJ_LOG(2, (THIS_FILE,"pjsua_transport_create. Init tls"));
 	/*
 	 * Create TLS transport.
 	 */
@@ -2063,7 +2066,7 @@
     }
 
     /* Set transport state callback */
-    if (pjsua_var.ua_cfg.cb.on_transport_state) {
+    //if (pjsua_var.ua_cfg.cb.on_transport_state) { // jegumi
 	pjsip_tp_state_callback tpcb;
 	pjsip_tpmgr *tpmgr;
 
@@ -2074,7 +2077,7 @@
 	    pjsua_var.old_tp_cb = tpcb;
 	    pjsip_tpmgr_set_state_cb(tpmgr, &on_tp_state_callback);
 	}
-    }
+    //}
 
     /* Return the ID */
     if (p_id) *p_id = id;
@@ -2329,6 +2332,8 @@
 void pjsua_process_msg_data(pjsip_tx_data *tdata,
 			    const pjsua_msg_data *msg_data)
 {
+	
+
     pj_bool_t allow_body;
     const pjsip_hdr *hdr;
 
@@ -2401,7 +2406,6 @@
     }
 }
 
-
 /*
  * Add route_set to outgoing requests
  */
Index: jni/pjsip/sources/pjsip/src/pjsip/sip_transport_tls.c
===================================================================
--- jni/pjsip/sources/pjsip/src/pjsip/sip_transport_tls.c	(revisión: 3933)
+++ jni/pjsip/sources/pjsip/src/pjsip/sip_transport_tls.c	(copia de trabajo)
@@ -1565,7 +1565,7 @@
 	return;
     }
 
-    PJ_LOG(5,(tls->base.obj_name, "Sending %d byte(s) keep-alive to %.*s:%d", 
+    PJ_LOG(5,(tls->base.obj_name, "Sending %d byte(s) keep-alive (TLS) to %.*s:%d", 
 	      (int)tls->ka_pkt.slen, (int)tls->base.remote_name.host.slen,
 	      tls->base.remote_name.host.ptr,
 	      tls->base.remote_name.port));
Index: jni/pjsip/sources/pjsip/src/pjsip/sip_transport_tcp.c
===================================================================
--- jni/pjsip/sources/pjsip/src/pjsip/sip_transport_tcp.c	(revisión: 3933)
+++ jni/pjsip/sources/pjsip/src/pjsip/sip_transport_tcp.c	(copia de trabajo)
@@ -1245,14 +1245,10 @@
 	}
 
     } else {
-
 	/* Transport is closed */
-	PJ_LOG(4,(tcp->base.obj_name, "TCP connection closed"));
-	
+	PJ_LOG(4,(tcp->base.obj_name, "TCP connection closed"));	
 	tcp_init_shutdown(tcp, status);
-
 	return PJ_FALSE;
-
     }
 
     /* Reset pool. */
@@ -1342,6 +1338,8 @@
     
 	pj_bzero(&state_info, sizeof(state_info));
 	(*state_cb)(&tcp->base, PJSIP_TP_STATE_CONNECTED, &state_info);
+    } else {
+	PJ_LOG(4,(tcp->base.obj_name, "TCP transport with no callback"));
     }
 
     /* Flush all pending send operations */
@@ -1376,6 +1374,8 @@
     PJ_TIME_VAL_SUB(now, tcp->last_activity);
 
     if (now.sec > 0 && now.sec < PJSIP_TCP_KEEP_ALIVE_INTERVAL) {
+	PJ_LOG(2,(THIS_FILE,"TCP transport - There has been activity, so don't send keep-alive"));
+
 	/* There has been activity, so don't send keep-alive */
 	delay.sec = PJSIP_TCP_KEEP_ALIVE_INTERVAL - now.sec;
 	delay.msec = 0;
Index: jni/pjsip/sources/pjsip/include/pjsua-lib/pjsua.h
===================================================================
--- jni/pjsip/sources/pjsip/include/pjsua-lib/pjsua.h	(revisión: 3933)
+++ jni/pjsip/sources/pjsip/include/pjsua-lib/pjsua.h	(copia de trabajo)
@@ -3815,7 +3815,8 @@
  */
 PJ_DECL(void) pjsua_call_setting_default(pjsua_call_setting *opt);
 
-
+// jegumi 
+#if PJSUA_HAS_VIDEO
 /**
  * Initialize video stream operation param with default values.
  *
@@ -3824,6 +3825,7 @@
 PJ_DECL(void)
 pjsua_call_vid_strm_op_param_default(pjsua_call_vid_strm_op_param *param);
 
+#endif
 
 /**
  * Get maximum number of calls configured in pjsua.
@@ -4313,6 +4315,8 @@
 				     char *buffer, 
 				     unsigned maxlen,
 				     const char *indent);
+// jegumi
+#if PJSUA_HAS_VIDEO
 
 /**
  * Get the media stream index of the default video stream in the call.
@@ -4364,6 +4368,7 @@
 				pjsua_call_vid_strm_op op,
 				const pjsua_call_vid_strm_op_param *param);
 
+#endif
 
 /**
  * Get media stream info for the specified media index.
@@ -5887,6 +5892,8 @@
  * @}
  */
 
+// jegumi
+#if PJSUA_HAS_VIDEO
 
 /*****************************************************************************
  * VIDEO API
@@ -6220,6 +6227,7 @@
  * @}
  */
 
+#endif // PJSUA_HAS_VIDEO
 
 /**
  * @}
Index: jni/pjsip/sources/pjsip/include/pjsip/sip_transport.h
===================================================================
--- jni/pjsip/sources/pjsip/include/pjsip/sip_transport.h	(revisión: 3933)
+++ jni/pjsip/sources/pjsip/include/pjsip/sip_transport.h	(copia de trabajo)
@@ -255,9 +255,8 @@
 
 
 /*****************************************************************************
+pkt_info
  *
- * RECEIVE DATA BUFFER.
- *
  *****************************************************************************/
 
 /** 
@@ -278,6 +277,19 @@
  * called, this buffer will be deleted/recycled. So care must be taken when
  * allocating storage from the pool of this buffer.
  */
+
+typedef struct pjsip_pkt_info
+{
+    pj_time_val		 timestamp;
+    char	         packet[PJSIP_MAX_PKT_LEN];
+    pj_uint32_t		 zero;
+    pj_ssize_t		 len;
+    pj_sockaddr		 src_addr;
+    int			 src_addr_len;
+    char	         src_name[PJ_INET6_ADDRSTRLEN];
+    int			 src_port;
+} pjsip_pkt_info;
+
 struct pjsip_rx_data
 {
 
@@ -306,35 +318,9 @@
      * pkt_info is initialized by transport when it receives an incoming
      * packet.
      */
-    struct
-    {
-	/** Time when the message was received. */
-	pj_time_val		 timestamp;
+    pjsip_pkt_info pkt_info;
 
-	/** Pointer to the original packet. */
-	char			 packet[PJSIP_MAX_PKT_LEN];
 
-	/** Zero termination for the packet. */
-	pj_uint32_t		 zero;
-
-	/** The length of the packet received. */
-	pj_ssize_t		 len;
-
-	/** The source address from which the packet was received. */
-	pj_sockaddr		 src_addr;
-
-	/** The length of the source address. */
-	int			 src_addr_len;
-
-	/** The IP source address string (NULL terminated). */
-	char			 src_name[PJ_INET6_ADDRSTRLEN];
-
-	/** The IP source port number. */
-	int			 src_port;
-
-    } pkt_info;
-
-
     /**
      * msg_info is initialized by transport mgr (tpmgr) before this buffer
      * is passed to endpoint.
Index: jni/pjsip/sources/pjsip/include/pjsip/sip_config.h
===================================================================
--- jni/pjsip/sources/pjsip/include/pjsip/sip_config.h	(revisión: 3933)
+++ jni/pjsip/sources/pjsip/include/pjsip/sip_config.h	(copia de trabajo)
@@ -237,7 +237,10 @@
  * containing presence information can be quite large (>1500).
  */
 #ifndef PJSIP_MAX_PKT_LEN
-#   define PJSIP_MAX_PKT_LEN		4000
+//#   define PJSIP_MAX_PKT_LEN		4000
+// 0417102012 patch message size (send photos) - jegumi
+#   define PJSIP_MAX_PKT_LEN		60000
+// 0417102012 end patch
 #endif
 
 
@@ -423,7 +426,7 @@
  * Default: 600
  */
 #ifndef PJSIP_TRANSPORT_IDLE_TIME
-#   define PJSIP_TRANSPORT_IDLE_TIME	600
+#   define PJSIP_TRANSPORT_IDLE_TIME	1200 // jegumi
 #endif
 
 
@@ -461,7 +464,8 @@
  * @see PJSIP_TCP_KEEP_ALIVE_DATA
  */
 #ifndef PJSIP_TCP_KEEP_ALIVE_INTERVAL
-#   define PJSIP_TCP_KEEP_ALIVE_INTERVAL    90
+// jegumi #   define PJSIP_TCP_KEEP_ALIVE_INTERVAL    90
+#   define PJSIP_TCP_KEEP_ALIVE_INTERVAL    880 // jegumi
 #endif
 
 
@@ -484,7 +488,7 @@
  * @see PJSIP_TLS_KEEP_ALIVE_DATA
  */
 #ifndef PJSIP_TLS_KEEP_ALIVE_INTERVAL
-#   define PJSIP_TLS_KEEP_ALIVE_INTERVAL    90
+#   define PJSIP_TLS_KEEP_ALIVE_INTERVAL    880 // jegumi
 #endif
 
 
Index: jni/pjsip/sources/pjlib/include/pj/config.h
===================================================================
--- jni/pjsip/sources/pjlib/include/pj/config.h	(revisión: 3951)
+++ jni/pjsip/sources/pjlib/include/pj/config.h	(copia de trabajo)
@@ -91,6 +91,14 @@
      */
 #  include <pj/compat/os_linux_kernel.h>
 
+#elif defined(PJ_ANDROID) && PJ_ANDROID!=0
+    /*
+     * Android
+     */
+#   undef PJ_ANDROID
+#   define PJ_ANDROID   1
+#   include <pj/compat/os_android.h>
+
 #elif defined(PJ_LINUX) || defined(linux) || defined(__linux)
     /*
      * Linux
Index: jni/pjsip/sources/aconfigure
===================================================================
--- jni/pjsip/sources/aconfigure	(revisión: 3933)
+++ jni/pjsip/sources/aconfigure	(copia de trabajo)
@@ -710,6 +710,7 @@
 ac_no_g7221_codec
 ac_no_speex_codec
 ac_no_ilbc_codec
+ac_webrtc_platform
 ac_sdl_cflags
 ac_sdl_ldflags
 ac_has_ffmpeg
@@ -1979,7 +1980,7 @@
   program_prefix=${target_alias}-
 ac_config_headers="$ac_config_headers pjlib/include/pj/compat/os_auto.h pjlib/include/pj/compat/m_auto.h pjmedia/include/pjmedia/config_auto.h pjmedia/include/pjmedia-codec/config_auto.h pjsip/include/pjsip/sip_autoconf.h"
 
-ac_config_files="$ac_config_files build.mak build/os-auto.mak build/cc-auto.mak pjlib/build/os-auto.mak pjlib-util/build/os-auto.mak pjmedia/build/os-auto.mak pjsip/build/os-auto.mak third_party/build/os-auto.mak third_party/build/portaudio/os-auto.mak"
+ac_config_files="$ac_config_files build.mak build/os-auto.mak build/cc-auto.mak pjlib/build/os-auto.mak pjlib-util/build/os-auto.mak pjmedia/build/os-auto.mak pjsip/build/os-auto.mak third_party/build/os-auto.mak third_party/build/portaudio/os-auto.mak third_party/build/webrtc/os-auto.mak third_party/build/os-auto.mak"
 
 
 
@@ -13246,8 +13247,21 @@
 fi
 
 
+case $target in
+ *darwin*)
+       ac_webrtc_platform=webrtc_darwinos
+       ;;
+ *mingw*)
+       ac_webrtc_platform=webrtc_win32
+       ;;
+ *linux*)
+       ac_webrtc_platform=webrtc_linux
+       ;;
+ *)
+       ac_webrtc_platform=null
+       ;;
+esac
 
-
 # Check whether --enable-ssl was given.
 if test "${enable_ssl+set}" = set; then
   enableval=$enable_ssl;
@@ -14458,6 +14472,7 @@
     "pjsip/build/os-auto.mak") CONFIG_FILES="$CONFIG_FILES pjsip/build/os-auto.mak" ;;
     "third_party/build/os-auto.mak") CONFIG_FILES="$CONFIG_FILES third_party/build/os-auto.mak" ;;
     "third_party/build/portaudio/os-auto.mak") CONFIG_FILES="$CONFIG_FILES third_party/build/portaudio/os-auto.mak" ;;
+	"third_party/build/webrtc/os-auto.mak" ) CONFIG_FILES="$CONFIG_FILES third_party/build/webrtc/os-auto.mak" ;;
 
   *) { { echo "$as_me:$LINENO: error: invalid argument: $ac_config_target" >&5
 echo "$as_me: error: invalid argument: $ac_config_target" >&2;}
Index: jni/csipsimple-wrapper/src/pjsua_jni_addons.c
===================================================================
--- jni/csipsimple-wrapper/src/pjsua_jni_addons.c	(revisión: 1212)
+++ jni/csipsimple-wrapper/src/pjsua_jni_addons.c	(copia de trabajo)
@@ -180,6 +180,8 @@
 
 pj_status_t vid_set_stream_window(pjsua_call_media* call_med, pjmedia_dir dir, void* window){
 	pj_status_t status = PJ_ENOTFOUND;
+// jegumi
+#if PJMEDIA_HAS_VIDEO
 	pjsua_vid_win *w = NULL;
 	pjsua_vid_win_id wid;
 	pjmedia_vid_dev_stream *dev;
@@ -205,7 +207,7 @@
 			}
 		}
 	}
-
+#endif
 	return status;
 }
 
@@ -803,3 +805,321 @@
 	return PJ_SUCCESS;
 }
 
+// 0016012012 patch to convert pj_str_t to Java String - ggb
+PJ_DECL(jstring) pj_ptr_to_string(const pj_str_t * str) {
+    jstring result = NULL;
+    char * dup_str = (char*)malloc(str->slen + 1);
+
+    strncpy(dup_str, str->ptr, str->slen);
+    dup_str[str->slen] = '\0';
+
+        JNIEnv *jni_env = 0;
+        ATTACH_JVM(jni_env);
+        result = (*jni_env)->NewStringUTF(jni_env, dup_str);
+        DETACH_JVM(jni_env);
+
+    free(dup_str);
+    return result;
+}
+
+// end path
+
+// 16012012 patch to add and get sip headers - jegumi
+PJ_DEF(pj_status_t)
+add_sip_header(pjsua_msg_data *msg_data,
+               pj_str_t hname,
+               pj_str_t hvalue) {
+  
+  PJ_LOG(2, (THIS_FILE,"Creating new Header"));
+  pjsip_endpoint *endpt = pjsua_get_pjsip_endpt();
+  pj_pool_t * pool = pjsip_endpt_create_pool(endpt, "New Header", 100, 100);
+  pjsip_generic_string_hdr * header = pjsip_generic_string_hdr_create(pool, &hname, &hvalue);
+  pj_list_push_back(&msg_data->hdr_list, header);
+
+  return PJ_SUCCESS;
+}
+
+PJ_DEF(jstring)
+get_sip_headers(pjsip_rx_data *rdata) {
+
+  int len;
+  int lenHeader; 
+  jstring result = NULL;
+  char *buf;
+  char str1[512];
+
+  PJ_LOG(2, (THIS_FILE,"Getting headers"));
+ 
+  pjsip_hdr *header = &rdata->msg_info.msg->hdr;
+  pjsip_generic_string_hdr *string_hdr = (pjsip_generic_string_hdr*) header;
+ 
+  len = rdata->msg_info.len;
+  buf = (char*)malloc(len);
+  memset(buf,'\0',len);
+  
+  do { 
+    if (string_hdr->type == PJSIP_H_OTHER) {
+      lenHeader = pjsip_hdr_print_on(string_hdr, str1, len);
+      if (lenHeader > 0) {
+        strcat(buf, str1); 
+        strcat(buf, "\r\n");
+      }
+    }
+    string_hdr = string_hdr->next;
+  } while ((pjsip_hdr*)string_hdr != header && string_hdr != NULL); 
+
+  JNIEnv *jni_env = 0;
+  ATTACH_JVM(jni_env);
+  result = (*jni_env)->NewStringUTF(jni_env, buf);
+  DETACH_JVM(jni_env);  
+ 
+  free(buf);
+  return result;
+}
+
+// 16012012 end patch 
+
+void on_send_request_status_wrapper(pjsip_status_code status, const pj_str_t *reason, const pj_str_t *mime_type, const pj_str_t *body);
+
+static void send_request_status(void *token, pjsip_event *e) {
+
+    if (e->type != PJSIP_EVENT_TSX_STATE) {
+        return;
+    }
+
+    pjsip_transaction *tsx = e->body.tsx_state.tsx;
+
+    /* Ignore provisional response, if any */
+    if (tsx->status_code < 200) {
+       return;
+    }
+
+     /* Handle authentication challenges */
+     if (e->body.tsx_state.type == PJSIP_EVENT_RX_MSG &&
+	    (tsx->status_code == 401 || tsx->status_code == 407)) {
+	    pjsip_rx_data *rdata = e->body.tsx_state.src.rdata;
+	    pjsip_tx_data *tdata;
+	    pjsip_auth_clt_sess auth;
+	    pj_status_t status;
+
+	    PJ_LOG(4,(THIS_FILE, "Resending Request with authentication"));
+
+	    /* Create temporary authentication session */
+	    pjsip_auth_clt_init(&auth,pjsua_var.endpt,rdata->tp_info.pool, 0);
+    
+            //TID: Assuming just one account
+            int acc_id = 0;
+	    pjsip_auth_clt_set_credentials(&auth, 
+		pjsua_var.acc[acc_id].cred_cnt,
+		pjsua_var.acc[acc_id].cred);
+
+	    pjsip_auth_clt_set_prefs(&auth, 
+				     &pjsua_var.acc[acc_id].cfg.auth_pref);
+
+	    status = pjsip_auth_clt_reinit_req(&auth, rdata, tsx->last_tx,
+					       &tdata);
+	    if (status == PJ_SUCCESS) {
+
+		    /* Increment CSeq */
+		    PJSIP_MSG_CSEQ_HDR(tdata->msg)->cseq++;
+
+		    /* Re-send request */
+		    status = pjsip_endpt_send_request( pjsua_var.endpt, tdata, -1,
+						       NULL, &send_request_status);
+		    if (status == PJ_SUCCESS) {
+		        /* Done */
+		        return;
+		    }
+	    }
+	}
+
+        pjsip_rx_data *rdata;
+        pj_str_t mime_type;
+        pj_str_t body;
+
+	if (tsx->status_code/100 == 2) {
+	    PJ_LOG(4,(THIS_FILE, "Message delivered successfully"));
+            if (e->body.tsx_state.type == PJSIP_EVENT_RX_MSG) {
+	      rdata = e->body.tsx_state.src.rdata;
+              pjsip_msg_body *msg_body = rdata->msg_info.msg->body;
+              if (msg_body != NULL) {
+                char buf[256];
+                mime_type.ptr = buf;
+                pjsip_media_type * m = &msg_body->content_type;
+	        mime_type.slen = pj_ansi_snprintf(buf, sizeof(buf),
+   					      "%.*s/%.*s",
+					      (int)m->type.slen,
+					      m->type.ptr,
+					      (int)m->subtype.slen,
+					      m->subtype.ptr);
+    	       if (mime_type.slen < 1) {
+                 mime_type.slen = 0; 
+               }
+
+               body.ptr = (char*)msg_body->data;
+               body.slen = msg_body->len;
+            }
+          }
+          
+          on_send_request_status_wrapper(tsx->status_code, 
+                                      &tsx->status_text,
+                                      &mime_type,
+                                      &body);
+	} else {
+	    PJ_LOG(3,(THIS_FILE, "Failed to deliver message"));
+	}
+}
+
+// 23022012 patch accept - jegumi
+PJ_DEF(pj_status_t)
+add_contact_header(pjsua_acc_id acc_id,
+                   const pj_str_t *to,
+                   pjsip_tx_data *tdata) {
+    PJ_LOG(2, (THIS_FILE,"Adding Contact Header"));
+    
+    const pj_str_t STR_CONTACT = { "Contact", 7 };
+    pj_str_t contact;
+    pj_status_t status;
+
+    pjsip_accept_hdr *accept_hdr = pjsip_accept_hdr_create(tdata->pool);
+    if (accept_hdr) {
+        accept_hdr->values[0] = pj_str("application/jj-presence+xml");
+        accept_hdr->count = 1;
+
+       pjsip_msg_add_hdr(tdata->msg,(pjsip_hdr*)accept_hdr);
+    }
+
+    pjsip_expires_hdr *expires_hdr = pjsip_expires_hdr_create(tdata->pool, 0);
+    if (expires_hdr) {
+        pjsip_msg_add_hdr(tdata->msg, (pjsip_hdr*)expires_hdr);
+    }
+    
+    pjsip_event_hdr *event_hdr = pjsip_event_hdr_create(tdata->pool);
+    if (event_hdr) {
+        event_hdr->event_type = pj_str("presence");
+        pjsip_msg_add_hdr(tdata->msg, (pjsip_hdr*)event_hdr);
+    }
+
+
+    status = pjsua_acc_create_uac_contact(tdata->pool, &contact, acc_id, to);
+    if (status != PJ_SUCCESS) {
+	pjsua_perror(THIS_FILE, "Unable to generate Contact header", status);
+	pjsip_tx_data_dec_ref(tdata);
+	return status;
+    }
+
+    pjsip_msg_add_hdr( tdata->msg, (pjsip_hdr*)
+	pjsip_generic_string_hdr_create(tdata->pool, 
+					&STR_CONTACT, &contact));
+    return PJ_SUCCESS;
+}
+
+PJ_DEF(pj_status_t)
+add_accept_header(pjsua_msg_data *msg_data) {
+    PJ_LOG(2, (THIS_FILE,"Adding Accept Header"));
+    
+    pjsip_endpoint *endpt = pjsua_get_pjsip_endpt();
+    pj_pool_t *pool = pjsip_endpt_create_pool(endpt, "Accept Header", 100, 100);
+    pjsip_accept_hdr *accept_hdr = pjsip_accept_hdr_create(pool);
+    if (accept_hdr) {
+        accept_hdr->values[0] = pj_str("application/jj-presence+xml");
+        accept_hdr->count = 1;
+
+        pj_list_push_back(&msg_data->hdr_list, accept_hdr);
+    }
+
+    return PJ_SUCCESS;
+} 
+// 23022012 end patch
+
+PJ_DEF(pj_status_t)
+send_request(pjsua_acc_id acc_id, 
+             const pj_str_t *method,
+	     const pj_str_t *to,
+	     const pj_str_t *mime_type,
+	     const pj_str_t *content,
+	     const pjsua_msg_data *msg_data,
+	     void *user_data) {
+
+    PJ_LOG(2, (THIS_FILE,"Send Request presence", &msg_data->msg_body.ptr));  
+
+    const pj_str_t mime_text_plain = pj_str("text/plain"); 
+    const pj_str_t content_default = pj_str("");
+    
+    pjsip_tx_data *tdata;
+    pjsip_media_type media_type;
+    pjsua_acc *acc;
+    pj_status_t status;
+
+    /* To and message body must be specified. */
+    PJ_ASSERT_RETURN(method && to, PJ_EINVAL);
+
+    acc = &pjsua_var.acc[acc_id];
+    pjsip_method pj_method;
+    pjsip_method_init(&pj_method, css_var.pool, method);
+
+    /* Create request. */
+    status = pjsip_endpt_create_request(pjsua_var.endpt, 
+					&pj_method, to, 
+					&acc->cfg.id,
+					to, NULL, NULL, -1, NULL, &tdata);
+    if (status != PJ_SUCCESS) {
+	pjsua_perror(THIS_FILE, "Unable to create request", status);
+	return status;
+    }
+
+    /* If account is locked to specific transport, then set transport to
+     * the request.
+     */
+    if (acc->cfg.transport_id != PJSUA_INVALID_ID) {
+	pjsip_tpselector tp_sel;
+
+	pjsua_init_tpselector(acc->cfg.transport_id, &tp_sel);
+	pjsip_tx_data_set_transport(tdata, &tp_sel);
+    }
+    
+    // jegumi - adding contact header
+    add_contact_header(acc_id, to, tdata);
+
+    /* Set default media type if none is specified */
+
+   if (mime_type == NULL) {
+	mime_type = &mime_text_plain;
+    }
+
+    if (content == NULL) {
+    	content = &content_default;
+    }
+
+    if (mime_type != NULL && content != NULL) {
+        /* Parse MIME type */
+        pjsua_parse_media_type(tdata->pool, mime_type, &media_type);
+        /* Add message body */
+        tdata->msg->body = pjsip_msg_body_create( tdata->pool, &media_type.type,
+					          &media_type.subtype, 
+					          content);
+        if (tdata->msg->body == NULL) {
+	    pjsua_perror(THIS_FILE, "Unable to create msg body", PJ_ENOMEM);
+	    pjsip_tx_data_dec_ref(tdata);
+	    return PJ_ENOMEM;
+        }
+    } 
+   
+    /* Add additional headers etc. */
+    pjsua_process_msg_data(tdata, msg_data);
+
+    /* Add route set */
+    pjsua_set_msg_route_set(tdata, &acc->route_set);
+
+    /* Send request (statefully) */
+    status = pjsip_endpt_send_request(pjsua_var.endpt, tdata, -1, 
+				       user_data, &send_request_status);
+    if (status != PJ_SUCCESS) {
+	pjsua_perror(THIS_FILE, "Unable to send request", status);
+	return status;
+    }
+
+    return PJ_SUCCESS;
+}
+
+// end patch 
Index: jni/csipsimple-wrapper/include/pjsua_jni_addons.h
===================================================================
--- jni/csipsimple-wrapper/include/pjsua_jni_addons.h	(revisión: 1212)
+++ jni/csipsimple-wrapper/include/pjsua_jni_addons.h	(copia de trabajo)
@@ -135,6 +135,32 @@
 PJ_DECL(pj_status_t) pjsua_acc_clean_all_registrations( pjsua_acc_id acc_id);
 PJ_DECL(pj_status_t) update_transport(const pj_str_t *new_ip_addr);
 PJ_DECL(pj_status_t) vid_set_android_window(pjsua_call_id call_id, jobject window);
+
+// 0016012012 patch to convert pj_str_t to Java String - ggb
+PJ_DECL(jstring) pj_ptr_to_string(const pj_str_t * str);
+// 0016012012 end path
+
+//16012012 patch to add and get sip headers - jegumi
+PJ_DECL(pj_status_t) add_sip_header(pjsua_msg_data *msg_data, pj_str_t hname, pj_str_t hvalue);
+PJ_DECL(jstring) get_sip_headers(pjsip_rx_data *rdata);
+// 16012012 end patch
+
+// 0317012012 patch presence - ggb
+PJ_DECL(pj_status_t) send_request(pjsua_acc_id acc_id, 
+				   const pj_str_t *method,
+				   const pj_str_t *to,
+				   const pj_str_t *mime_type,
+				   const pj_str_t *content,
+				   const pjsua_msg_data *msg_data,
+				   void *user_data);
+// 0317012012 end patch
+
+// 23022012 patch accept - jegumi
+PJ_DECL(pj_status_t) add_contact_header(pjsua_acc_id acc_id,
+                                        const pj_str_t *to, pjsip_tx_data *tdata);
+PJ_DECL(pj_status_t) add_accept_header(pjsua_msg_data *msg_data);
+// 23022012 end patch
+
 PJ_END_DECL
 
 #ifdef __cplusplus
Index: jni/Application.mk
===================================================================
--- jni/Application.mk	(revisión: 1189)
+++ jni/Application.mk	(copia de trabajo)
@@ -33,9 +33,8 @@
 MY_USE_AMR := 1
 MY_USE_G726 := 1
 
-MY_USE_VIDEO := 1
+MY_USE_VIDEO := 0
 
-
 #############################################################
 # Do not change behind this line the are flags for pj build #
 # Only build pjsipjni and ignore openssl                    #

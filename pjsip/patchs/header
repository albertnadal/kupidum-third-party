Index: jni/swig-glue/pjsua.i_header
===================================================================
--- jni/swig-glue/pjsua.i_header	(revisión: 1189)
+++ jni/swig-glue/pjsua.i_header	(copia de trabajo)
@@ -762,6 +762,71 @@
     } body;
 };
 
+// from pjsip/include/pjsip/pjsua_lib/pjsua.h:1625
+struct pjsua_msg_data
+{
+    pjsip_hdr	hdr_list;
+    pj_str_t	content_type;
+    pj_str_t	msg_body;
+    pjsip_media_type  multipart_ctype;
+    pjsip_multipart_part multipart_parts;
+};
+
+// from pjsip/include/pjsip/sip_transport.h:281
+struct pjsip_rx_data
+{
+    struct 
+    {
+	pj_pool_t		*pool;
+	pjsip_transport		*transport;
+	void			*tp_data;
+	pjsip_rx_data_op_key	 op_key;
+    } tp_info;
+
+    struct
+    {
+	pj_time_val		 timestamp;
+	char			 packet[PJSIP_MAX_PKT_LEN];
+	pj_uint32_t		 zero;
+	pj_ssize_t		 len;
+	pj_sockaddr		 src_addr;
+	int			 src_addr_len;
+	char			 src_name[PJ_INET6_ADDRSTRLEN];
+	int			 src_port;
+
+    } pkt_info;
+
+    struct
+    {
+	char			*msg_buf;
+	int			 len;
+	pjsip_msg		*msg;
+	char			*info;
+	pjsip_cid_hdr		*cid;
+	pjsip_from_hdr		*from;
+	pjsip_to_hdr		*to;
+	pjsip_via_hdr		*via;
+	pjsip_cseq_hdr		*cseq;
+	pjsip_max_fwd_hdr	*max_fwd;
+	pjsip_route_hdr		*route;
+	pjsip_rr_hdr		*record_route;
+	pjsip_ctype_hdr		*ctype;
+	pjsip_clen_hdr		*clen;
+	pjsip_require_hdr	*require;
+	pjsip_supported_hdr	*supported;
+	pjsip_parser_err_report parse_err;
+
+    } msg_info;
+
+    struct
+    {
+	void	*mod_data[PJSIP_MAX_MODULE];
+
+    } endpt_info;
+
+};
+
+
 // From pjmedia/include/pjmedia/sound.h:69
 struct pjmedia_snd_dev_info
 {
Index: jni/csipsimple-wrapper/src/pjsua_jni_addons.c
===================================================================
--- jni/csipsimple-wrapper/src/pjsua_jni_addons.c	(revisión: 1189)
+++ jni/csipsimple-wrapper/src/pjsua_jni_addons.c	(copia de trabajo)
@@ -450,6 +450,50 @@
 	return result;
 }
 
+PJ_DEF(pj_status_t)
+add_sip_header(pjsua_msg_data *msg_data,
+               pj_str_t hname,
+               pj_str_t hvalue) {
+  
+  PJ_LOG(2, (THIS_FILE,"Creating new Header"));
+  pjsip_endpoint *endpt = pjsua_get_pjsip_endpt();
+  pj_pool_t * pool = pjsip_endpt_create_pool(endpt, "New Header", 100, 100);
+  pjsip_generic_string_hdr * header = pjsip_generic_string_hdr_create(pool, &hname, &hvalue);
+  pj_list_push_back(&msg_data->hdr_list, header);
+
+  return PJ_SUCCESS;
+}
+
+PJ_DEF(pj_status_t)
+get_sip_headers(pjsip_rx_data *rdata,
+                pj_str_t *headers) {
+
+  PJ_LOG(2, (THIS_FILE,"Getting headers"));
+
+  pjsip_hdr *header = &rdata->msg_info.msg->hdr;
+  pjsip_generic_string_hdr *string_hdr = (pjsip_generic_string_hdr*) header;
+ 
+  enum { BUFLEN = 512 };
+  char result[BUFLEN] = "";
+  pj_str_t str1;
+  pjsip_endpoint *endpt = pjsua_get_pjsip_endpt();
+  pj_pool_t * pool = pjsip_endpt_create_pool(endpt, "New Header", 100, 100);
+  str1.ptr = (char*)pj_pool_alloc(pool, BUFLEN);
+  
+  do { 
+    if (string_hdr->type == PJSIP_H_OTHER) {
+      pjsip_hdr_print_on(string_hdr, str1.ptr, BUFLEN);
+      PJ_LOG(2, (THIS_FILE,"Getting header %s", str1.ptr));
+      strcat(result, str1.ptr);
+      strcat(result, "\n");
+    }
+    string_hdr = string_hdr->next;
+  } while ((pjsip_hdr*)string_hdr != header && string_hdr != NULL); 
+
+  *headers = pj_str(result);
+  return PJ_SUCCESS;
+}
+
 PJ_DECL(pj_status_t) csipsimple_destroy(void) {
 	destroy_ringback_tone();
 
Index: jni/csipsimple-wrapper/include/pjsua_jni_addons.h
===================================================================
--- jni/csipsimple-wrapper/include/pjsua_jni_addons.h	(revisión: 1189)
+++ jni/csipsimple-wrapper/include/pjsua_jni_addons.h	(copia de trabajo)
@@ -135,6 +135,8 @@
 PJ_DECL(pj_status_t) pjsua_acc_clean_all_registrations( pjsua_acc_id acc_id);
 PJ_DECL(pj_status_t) update_transport(const pj_str_t *new_ip_addr);
 PJ_DECL(pj_status_t) vid_set_android_window(pjsua_call_id call_id, jobject window);
+PJ_DECL(pj_status_t) add_sip_header(pjsua_msg_data *msg_data, pj_str_t hname, pj_str_t hvalue);
+PJ_DECL(pj_status_t) get_sip_headers(pjsip_rx_data *rdata, pj_str_t *headers);
 PJ_END_DECL
 
 #ifdef __cplusplus
